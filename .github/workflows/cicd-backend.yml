name: CI/CD Backend

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/cicd-backend.yml
      - backend/**
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/cicd-backend.yml
      - backend/**
    types:
      - opened
      - synchronize
      - reopened

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
      packages: write
    env:
      BUILD_CONFIGURATION: Release
      MIGRATIONS_SCRIPT: ${{ github.workspace }}/backend/migrations.sql
      CONTAINER_REGISTRY: ghcr.io
      API_IMAGE_REPOSITORY: frasermclean/ratemypet-api
    defaults:
      run:
        working-directory: ${{ github.workspace }}/backend
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9

      # Restore packages
      - name: Restore packages
        run: dotnet restore

      # Build solution
      - name: Build solution
        run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}

      # Run tests
      - name: Run tests
        run: >-
          dotnet test
          --no-build
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --logger trx
          --collect "XPlat Code Coverage"
          --settings coverlet.runsettings

      # Publish test results
      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: ${{ github.workspace }}/backend/tests/**/TestResults/*.trx
          check_name: Test results
          action_fail: true

      # Upload coverage reports
      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      # Install EF tool
      - name: Install EF tool
        if: github.event_name == 'push'
        run: dotnet tool install --global dotnet-ef

      # Build migrations script
      - name: Build migrations script
        if: github.event_name == 'push'
        run: >-
          dotnet ef migrations script
          --no-build
          --idempotent
          --output ${{ env.MIGRATIONS_SCRIPT }}
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --project src/Infrastructure/Infrastructure.csproj
          --startup-project src/Api/Api.csproj

      # Upload migrations script
      - name: Upload migrations script
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: migrations
          path: ${{ env.MIGRATIONS_SCRIPT }}

      # Bump version and push tag
      - name: Bump version and push tag
        if: github.event_name == 'push'
        uses: anothrNick/github-tag-action@v1
        id: push_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          PRERELEASE: ${{ github.ref != 'refs/heads/main' }}

      # Set up QEMU
      - name: Set up QEMU
        if: github.event_name == 'push'
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        if: github.event_name == 'push'
        uses: docker/setup-buildx-action@v3

      # Login to container registry
      - name: Login to container registry
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push API image
      - name: Build and push API image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: "{{defaultContext}}:backend"
          file: src/Api/Dockerfile
          push: true
          tags: |
            ${{ env.CONTAINER_REGISTRY }}/${{ env.API_IMAGE_REPOSITORY }}:latest
            ${{ env.CONTAINER_REGISTRY }}/${{ env.API_IMAGE_REPOSITORY }}:${{ steps.push_tag.outputs.tag }}

      # Publish jobs project
      - name: Publish jobs project
        if: github.event_name == 'push'
        run: >-
          dotnet publish src/Jobs/Jobs.csproj
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --output ${{ github.workspace }}/jobs
          -p:Version=${{ steps.push_tag.outputs.tag }}

      # Upload jobs artifact
      - name: Upload jobs artifact
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: jobs
          path: ${{ github.workspace }}/jobs
          include-hidden-files: true
    outputs:
      apiImage: ${{ env.CONTAINER_REGISTRY }}/${{ env.API_IMAGE_REPOSITORY }}:${{ steps.push_tag.outputs.tag }}

  deploy:
    name: Deploy applications
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
    strategy:
      matrix:
        environment: [test, prod]
    environment: ${{ matrix.environment }}
    steps:
      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v2
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Download artifacts
      - name: Download artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4

      # Deploy migrations script
      - name: Deploy migrations script
        uses: azure/sql-action@v2.3
        with:
          path: ${{ steps.download-artifacts.outputs.download-path }}/migrations/migrations.sql
          connection-string: ${{ secrets.DB_CONNECTION_STRING }}

      # Deploy API application
      - name: Deploy API application
        uses: azure/container-apps-deploy-action@v2
        with:
          imageToDeploy: ${{ needs.build.outputs.apiImage }}
          containerAppName: ratemypet-${{ matrix.environment }}-api-ca
          resourceGroup: ratemypet-${{ matrix.environment }}-rg

      # Deploy jobs application
      - name: Deploy jobs application
        uses: Azure/functions-action@v1
        with:
          app-name: ratemypet-${{ matrix.environment }}-jobs-func
          package: ${{ steps.download-artifacts.outputs.download-path }}/jobs
