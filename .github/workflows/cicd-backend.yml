name: CI/CD Backend

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/cicd-backend.yml
      - backend/**
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/cicd-backend.yml
      - backend/**
    types:
      - opened
      - synchronize
      - reopened

jobs:
  build:
    name: Build application
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    env:
      BUILD_CONFIGURATION: Release
      MIGRATIONS_SCRIPT: ${{ github.workspace }}/backend/migrations.sql
    defaults:
      run:
        working-directory: ${{ github.workspace }}/backend
    outputs:
      versionTag: ${{ steps.calc_tag.outputs.new_tag }}

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      # Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9

      # Install EF tool
      - name: Install EF tool
        run: dotnet tool install --global dotnet-ef

      # Restore packages
      - name: Restore packages
        run: dotnet restore

      # Build solution
      - name: Build solution
        run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}

      # Run tests
      - name: Run tests
        run: >-
          dotnet test
          --no-build
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --logger trx
          --collect "XPlat Code Coverage"
          --settings coverlet.runsettings

      # Publish test results
      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: ${{ github.workspace }}/backend/tests/**/TestResults/*.trx
          check_name: Test results
          action_fail: true

      # Build migrations script
      - name: Build migrations script
        run: >-
          dotnet ef migrations script
          --no-build
          --idempotent
          --output ${{ env.MIGRATIONS_SCRIPT }}
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --project src/Infrastructure/Infrastructure.csproj
          --startup-project src/Api/Api.csproj

      # Upload migrations script
      - name: Upload migrations script
        uses: actions/upload-artifact@v4
        with:
          name: migrations
          path: ${{ env.MIGRATIONS_SCRIPT }}

      # Calculate next version
      - name: Calculate next version
        uses: anothrNick/github-tag-action@v1
        id: calc_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          DRY_RUN: true
          PRERELEASE: ${{ github.ref != 'refs/heads/main' }}

      # Publish jobs project
      - name: Publish jobs project
        run: >-
          dotnet publish src/Jobs/Jobs.csproj
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --output ${{ github.workspace }}/jobs
          -p:Version=${{ steps.calc_tag.outputs.new_tag }}

      # Upload jobs artifact
      - name: Upload jobs artifact
        uses: actions/upload-artifact@v4
        with:
          name: jobs
          path: ${{ github.workspace }}/jobs
          include-hidden-files: true

  deploy_migrations:
    name: Deploy migrations
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'test' }}
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'test' }}
    steps:
      # Download artifact
      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: migrations

      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v2
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy migrations script
      - name: Deploy migrations script
        uses: azure/sql-action@v2.3
        env:
          CONNECTION_STRING: >-
            Server=tcp:ratemypet-${{ env.ENVIRONMENT }}-sql.database.windows.net,1433;
            Initial Catalog=ratemypet-${{ env.ENVIRONMENT }}-sqldb;
            Encrypt=True;
            TrustServerCertificate=False;
            Connection Timeout=30;
            Authentication=Active Directory Default;
        with:
          path: ${{ steps.download-artifact.outputs.download-path }}/migrations.sql
          connection-string: ${{ env.CONNECTION_STRING }}

  deploy_api:
    name: Deploy API application
    runs-on: ubuntu-latest
    needs:
      - build
      - deploy_migrations
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'test' }}
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'test' }}
    permissions:
      id-token: write
      packages: write
    concurrency: azure-infra
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v2
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy Container App
      - name: Deploy Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          appSourcePath: ${{ github.workspace }}/backend
          dockerfilePath: src/Api
          imageToBuild: ghcr.io/frasermclean/ratemypet-api:${{ github.sha }}
          registryUrl: ghcr.io
          registryUsername: ${{ github.actor }}
          registryPassword: ${{ secrets.GITHUB_TOKEN }}
          containerAppName: ratemypet-${{ env.ENVIRONMENT }}-api-ca
          resourceGroup: ratemypet-${{ env.ENVIRONMENT }}-rg

  # Deploy jobs application
  deploy_jobs:
    name: Deploy jobs application
    runs-on: ubuntu-latest
    needs: deploy_migrations
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'test' }}
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'test' }}
    permissions:
      id-token: write
    steps:
      # Download artifact
      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs

      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v2
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Publish application
      - name: Publish application
        uses: Azure/functions-action@v1
        with:
          app-name: ratemypet-${{ env.ENVIRONMENT }}-jobs-func
          package: ${{ steps.download-artifact.outputs.download-path }}
